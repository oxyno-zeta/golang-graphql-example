# Build the manager binary
FROM --platform=${BUILDPLATFORM} golang:1.22 as builder
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# Copy the go source
COPY cmd/ cmd/
COPY pkg/ pkg/
COPY static/ static/
COPY Makefile Makefile

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
RUN GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} make code/build

#
## Run image
#
FROM alpine:3.19

ENV USER=appuser
ENV APP=golang-graphql-example
ENV UID=1000
ENV GID=1000

RUN apk add --update --no-cache ca-certificates=20240226-r0 && \
    rm -Rf /var/cache/apk/* && \
    addgroup -g $GID $USER && \
    adduser -D -g "" -h "/$USER" -G "$USER" -H -u "$UID" "$USER"

WORKDIR /$USER

COPY --from=builder /workspace/bin/$APP /$USER/$APP

RUN chown -R $UID:$GID /$USER

USER $USER

ENTRYPOINT [ "/appuser/golang-graphql-example" ]
