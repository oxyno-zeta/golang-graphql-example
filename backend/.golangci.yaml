# This file contains all available configuration options
# with their default values.
# options for analysis running
run:
  go: "1.19"
  # default concurrency is a available CPU number
  concurrency: 4
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 10m
  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1
  # include test files or not, default is true
  tests: false
  # list of build tags, all linters use it. Default is empty list.
  build-tags: []
  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  skip-dirs: []
  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true
  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files: []
  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor
  modules-download-mode: readonly
  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false
# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number
  # print lines of code with issue, default is true
  print-issued-lines: true
  # print linter name in the end of issue text, default is true
  print-linter-name: true
  # make issues output unique by line, default is true
  uniq-by-line: true
  # add a prefix to the output file references; default is no prefix
  path-prefix: ""
# all available settings of specific linters
linters-settings:
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - BUG
      - FIXME
      # - NOTE
      # - OPTIMIZE # marks code that should be optimized before merging
      # - HACK # marks hack-arounds that should be removed before merging
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  govet:
    # report about shadowed variables
    check-shadowing: true
    enable-all: true
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 160
    # tab width in spaces. Default to 1.
    tab-width: 1
  testpackage:
    # regexp pattern to skip files
    skip-regexp: _test\.go
linters:
  enable:
    - govet
    - errcheck
    - staticcheck
    - unused
    - gosimple
    - ineffassign
    - typecheck
    - bodyclose
    - noctx
    - rowserrcheck
    - stylecheck
    - gosec
    - unconvert
    - dupl
    - goconst
    - asciicheck
    - gofmt
    - goimports
    - goheader
    - depguard
    - misspell
    - lll
    - unparam
    - dogsled
    - nakedret
    - gocritic
    - gochecknoinits
    - godox
    - whitespace
    - wsl
    - goprintffuncname
    - gomnd
    - gomodguard
    - godot
    - exportloopref
    - exhaustive
    - sqlclosecheck
    - nlreturn
    - nolintlint
    - forcetypeassert
    - gomoddirectives
    - importas
    - nilerr
    - promlinter
    - revive
    - wastedassign
    - errname
    - tagliatelle
    - bidichk
    - contextcheck
    - nilnil
    - tenv
    - containedctx
    - errchkjson
    - decorder
    - grouper
    - asasalint
    - execinquery
    - reassign
    - usestdlibvars
  disable:
    - deadcode
    - varcheck
    - structcheck
    - prealloc
    - gochecknoglobals
    - gocyclo
    - gocognit
    - gofumpt
    - funlen
    - testpackage
    - gci
    - goerr113 # Forbid dynamic errors
    - nestif
    - scopelint
    - ireturn
    - varnamelen
    - maintidx
    - exhaustruct
    - nosnakecase
    - interfacebloat
  fast: false
issues:
  exclude-rules:
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "
    - linters:
        - lll
        - gocritic
        - govet
        - dupl
      path: \.resolvers\.go
    - linters:
        - gomoddirectives
      path: go.mod
    - linters:
        - tagliatelle
      path: pkg/.*/authx/models/oidc-user\.go
    - linters:
        - tagliatelle
      path: pkg/.*/authx/authentication/client\.go
    - linters:
        - tagliatelle
      path: pkg/.*/authx/authorization/middleware\.go
    - linters:
        - dupl
      path: pkg/.*/common/errors/.*\.go
  # issues:
  #   # List of regexps of issue texts to exclude, empty list by default.
  #   # But independently from this option we use default exclude patterns,
  #   # it can be disabled by `exclude-use-default: false`. To list all
  #   # excluded by default patterns execute `golangci-lint run --help`
  #   exclude:
  #     - abcdef
  #   # Excluding configuration per-path, per-linter, per-text and per-source
  #   exclude-rules:
  #     # Exclude some linters from running on tests files.
  #     - path: _test\.go
  #       linters:
  #         - gocyclo
  #         - errcheck
  #         - dupl
  #         - gosec
  #     # Exclude known linters from partially hard-vendored code,
  #     # which is impossible to exclude via "nolint" comments.
  #     - path: internal/hmac/
  #       text: "weak cryptographic primitive"
  #       linters:
  #         - gosec
  #     # Exclude some staticcheck messages
  #     - linters:
  #         - staticcheck
  #       text: "SA9003:"
  #     # Exclude lll issues for long lines with go:generate
  #     - linters:
  #         - lll
  #       source: "^//go:generate "
  #   # Independently from option `exclude` we use default exclude patterns,
  #   # it can be disabled by this option. To list all
  #   # excluded by default patterns execute `golangci-lint run --help`.
  #   # Default value for this option is true.
  #   exclude-use-default: false
  #   # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  #   max-issues-per-linter: 0
  #   # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  #   max-same-issues: 0
  #   # Show only new issues: if there are unstaged changes or untracked files,
  #   # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  #   # It's a super-useful option for integration of golangci-lint into existing
  #   # large codebase. It's not practical to fix all existing issues at the moment
  #   # of integration: much better don't allow issues in new code.
  #   # Default is false.
  #   new: false
  #   # Show only new issues created in git patch with set file path.
  #   new-from-patch: # path/to/patch/file
  # Fix found issues (if it's supported by the linter)
  fix: true
severity:
  # Default value is empty string.
  # Set the default severity for issues. If severity rules are defined and the issues
  # do not match or no severity is provided to the rule this will be the default
  # severity applied. Severities should match the supported severity names of the
  # selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # -       Github: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  default-severity: error
  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false
  # Default value is empty list.
  # When a list of severity rules are provided, severity information will be added to lint
  # issues. Severity rules have the same filtering capability as exclude rules except you
  # are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  rules:
    - linters:
        - dupl
      severity: info
