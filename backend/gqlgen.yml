# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graphql/*.graphql

# Where should the generated server code go?
exec:
  filename: pkg/golang-graphql-example/server/graphql/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: pkg/golang-graphql-example/server/graphql/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: pkg/golang-graphql-example/server/graphql/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: pkg/golang-graphql-example/server/graphql/
  package: graphql

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/server/graphql/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  DateFormat:
    model:
      - ./pkg/golang-graphql-example/server/graphql/utils.DateFormat
  PageInfo:
    model:
      - ./pkg/golang-graphql-example/server/graphql/utils.PageInfo
  IntFilter:
    model:
      - ./pkg/golang-graphql-example/database/common.GenericFilter
  BooleanFilter:
    model:
      - ./pkg/golang-graphql-example/database/common.GenericFilter
  DateFilter:
    model:
      - ./pkg/golang-graphql-example/database/common.DateFilter
  StringFilter:
    model:
      - ./pkg/golang-graphql-example/database/common.GenericFilter
  SortOrderEnum:
    model:
      - ./pkg/golang-graphql-example/database/common.SortOrderEnum
  Todo:
    model:
      - github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/business/todos/models.Todo
    fields:
      id:
        resolver: true
  TodoFilter:
    model:
      - ./pkg/golang-graphql-example/business/todos/models.Filter
  TodoSortOrder:
    model:
      - ./pkg/golang-graphql-example/business/todos/models.SortOrder
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
