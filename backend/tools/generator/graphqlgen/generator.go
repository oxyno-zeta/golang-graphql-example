package main

import (
	"os"
	"path"
	"strconv"

	"emperror.dev/errors"
	"github.com/dave/jennifer/jen"
)

const (
	EdgesStructureKeyName                  = "Edges"
	EdgesNodeKeyName                       = "Node"
	EdgesCursorKeyName                     = "Cursor"
	PageInfoStructureKeyName               = "PageInfo"
	PageInfoUtilsStructureName             = "PageInfo"
	PageInfoUtilsHasNextPageKeyName        = "HasNextPage"
	PageInfoUtilsHasPreviousPageKeyName    = "HasPreviousPage"
	PageInfoUtilsStartCursorKeyName        = "StartCursor"
	PageInfoUtilsEndCursorKeyName          = "EndCursor"
	PaginationPageOutputStructureName      = "PageOutput"
	PaginationPageOutSkipKeyName           = "Skip"
	PaginationPageOutputHasPreviousKeyName = "HasPrevious"
	PaginationPageOutputHasNextKeyName     = "HasNext"
)

func generate(cfg *Config) error {
	// Create directory
	err := os.MkdirAll(cfg.Path, os.ModePerm)
	// Check error
	if err != nil {
		return errors.WithStack(err)
	}

	// Create new file
	f := jen.NewFile(cfg.PackageName)

	// A comment to mark the file as generated
	f.PackageComment("Code generated by graphqlgen, DO NOT EDIT.")

	addImports(f, cfg.Connections, cfg.NeededPackages.GqlgenModelPackage)

	for _, v := range cfg.Connections {
		generateConnectionTransform(f, v, cfg.NeededPackages)
	}

	// Generate path
	p := path.Join(cfg.Path, "generated.go")

	// Save
	err = f.Save(p)
	// Check error
	if err != nil {
		return errors.WithStack(err)
	}

	// Default
	return nil
}

func addImports(f *jen.File, list []*ConnectionCfg, gqlgenModelPackage string) {
	// Cache imports to avoid duplicates
	cache := map[string]string{}

	f.ImportAlias(gqlgenModelPackage, "model")

	for i, m := range list {
		// Get from cache
		_, found := cache[m.Package]

		// If not found
		if !found {
			// Alias
			f.ImportAlias(m.Package, "models"+strconv.Itoa(i))
			// Save in cache
			cache[m.Package] = ""
		}
	}
}

func generateConnectionTransform(f *jen.File, conn *ConnectionCfg, neededPackages *NeededPackagesCfg) {
	const pageOutParamName = "pageOut"

	f.Func().Id("Map"+conn.GraphQLStructureName+"Connection").Params(
		jen.Id("list").Index().Op("*").Qual(conn.Package, conn.StructureName),
		jen.Id(pageOutParamName).Op("*").Qual(neededPackages.Pagination, PaginationPageOutputStructureName),
	).Parens(jen.List(
		jen.Op("*").Qual(neededPackages.GqlgenModelPackage, conn.GraphQLStructureName+"Connection"),
		jen.Error(),
	)).Block(
		jen.Id("edges").Op(":=").Make(
			jen.Index().Op("*").Qual(neededPackages.GqlgenModelPackage, conn.GraphQLStructureName+"Edge"),
			jen.Len(jen.Id("list")),
		),
		jen.Line(),

		jen.Var().Id("startCursor").Op(",").Id("endCursor").Op("*").String(),
		jen.Line(),

		jen.Id("last").Op(":=").Len(jen.Id("list")).Op("-").Lit(1),
		jen.Line(),

		jen.For(jen.Id("i").Op(",").Id("v").Op(":=").Range().Id("list")).Block(
			jen.Id("cursor").Op(":=").Qual(neededPackages.GraphqlUtils, "GetPaginateCursor").Parens(jen.List(
				jen.Id("i"),
				jen.Id(pageOutParamName).Op(".").Id(PaginationPageOutSkipKeyName),
			)),
			jen.Line(),

			jen.If(jen.Id("i").Op("==").Lit(0)).Block(
				jen.Id("startCursor").Op("=").Op("&").Id("cursor"),
			),
			jen.Line(),

			jen.If(jen.Id("i").Op("==").Id("last")).Block(
				jen.Id("endCursor").Op("=").Op("&").Id("cursor"),
			),
			jen.Line(),

			jen.Id("edges").Index(jen.Id("i")).Op("=").Op("&").
				Qual(neededPackages.GqlgenModelPackage, conn.GraphQLStructureName+"Edge").
				Values(jen.Dict{
					jen.Id(EdgesNodeKeyName):   jen.Id("v"),
					jen.Id(EdgesCursorKeyName): jen.Id("cursor"),
				}),
		),
		jen.Line(),

		jen.Id("res").Op(":=").Op("&").Qual(neededPackages.GqlgenModelPackage, conn.GraphQLStructureName+"Connection").Values(jen.Dict{
			jen.Id(EdgesStructureKeyName): jen.Id("edges"),
			jen.Id(PageInfoStructureKeyName): jen.Op("&").Qual(neededPackages.GraphqlUtils, PageInfoUtilsStructureName).Values(jen.Dict{
				jen.Id(PageInfoUtilsHasNextPageKeyName):     jen.Id(pageOutParamName).Op(".").Id(PaginationPageOutputHasNextKeyName),
				jen.Id(PageInfoUtilsHasPreviousPageKeyName): jen.Id(pageOutParamName).Op(".").Id(PaginationPageOutputHasPreviousKeyName),
				jen.Id(PageInfoUtilsStartCursorKeyName):     jen.Id("startCursor"),
				jen.Id(PageInfoUtilsEndCursorKeyName):       jen.Id("endCursor"),
			}),
		}),
		jen.Line(),

		jen.Return(jen.Id("res"), jen.Nil()),
	)
}
