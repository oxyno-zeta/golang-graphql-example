// Code generated by ModelTags. DO NOT EDIT.
package dev

import "emperror.dev/errors"


// ErrObject1UnsupportedGormColumn will be thrown when an unsupported Gorm column will be found in transform function.
var ErrObject1UnsupportedGormColumn = errors.Sentinel("unsupported gorm column")

// ErrObject1UnsupportedJSONKey will be thrown when an unsupported JSON key will be found in transform function.
var ErrObject1UnsupportedJSONKey = errors.Sentinel("unsupported json key")

// ErrObject1UnsupportedStructKeyName will be thrown when an unsupported structure key will be found in transform function.
var ErrObject1UnsupportedStructKeyName = errors.Sentinel("unsupported struct key")

/*
 * Gorm columns Names
 */
// Object1 CreatedAt Gorm Column Name
const Object1CreatedAtGormColumnName = "created_at"

// Object1 DeletedAt Gorm Column Name
const Object1DeletedAtGormColumnName = "deleted_at"

// Object1 ID Gorm Column Name
const Object1IDGormColumnName = "id"

// Object1 Name Gorm Column Name
const Object1NameGormColumnName = "name"

// Object1 UpdatedAt Gorm Column Name
const Object1UpdatedAtGormColumnName = "updated_at"

var Object1GormColumnNameList = []string{
    Object1CreatedAtGormColumnName,
    Object1DeletedAtGormColumnName,
    Object1IDGormColumnName,
    Object1NameGormColumnName,
    Object1UpdatedAtGormColumnName,
}

/*
 * JSON Key Names
 */
// Object1 CreatedAt JSON Key Name
const Object1CreatedAtJSONKeyName = "createdAt"

// Object1 DeletedAt JSON Key Name
const Object1DeletedAtJSONKeyName = "deletedAt"

// Object1 ID JSON Key Name
const Object1IDJSONKeyName = "id"

// Object1 Name JSON Key Name
const Object1NameJSONKeyName = "Name"

// Object1 UpdatedAt JSON Key Name
const Object1UpdatedAtJSONKeyName = "updatedAt"

var Object1JSONKeyNameList = []string{
    Object1CreatedAtJSONKeyName,
    Object1DeletedAtJSONKeyName,
    Object1IDJSONKeyName,
    Object1NameJSONKeyName,
    Object1UpdatedAtJSONKeyName,
}

/*
 * Struct Key Names
 */
// Object1 CreatedAt Struct Key Name
const Object1CreatedAtStructKeyName = "CreatedAt"

// Object1 DeletedAt Struct Key Name
const Object1DeletedAtStructKeyName = "DeletedAt"

// Object1 ID Struct Key Name
const Object1IDStructKeyName = "ID"

// Object1 Name Struct Key Name
const Object1NameStructKeyName = "Name"

// Object1 UpdatedAt Struct Key Name
const Object1UpdatedAtStructKeyName = "UpdatedAt"

var Object1StructKeyNameList = []string{
    Object1CreatedAtStructKeyName,
    Object1DeletedAtStructKeyName,
    Object1IDStructKeyName,
    Object1NameStructKeyName,
    Object1UpdatedAtStructKeyName,
}


// Transform Object1 Gorm Column To JSON Key
func TransformObject1GormColumnToJSONKey(gormColumn string) (string, error) {
	switch gormColumn {
	case Object1CreatedAtGormColumnName:
		return Object1CreatedAtJSONKeyName, nil
	case Object1DeletedAtGormColumnName:
		return Object1DeletedAtJSONKeyName, nil
	case Object1IDGormColumnName:
		return Object1IDJSONKeyName, nil
	case Object1NameGormColumnName:
		return Object1NameJSONKeyName, nil
	case Object1UpdatedAtGormColumnName:
		return Object1UpdatedAtJSONKeyName, nil
	default:
		return "", errors.WithStack(ErrObject1UnsupportedGormColumn)
	}
}

// Transform Object1 JSON Key To Gorm Column
func TransformObject1JSONKeyToGormColumn(jsonKey string) (string, error) {
	switch jsonKey {
	case Object1CreatedAtJSONKeyName:
		return Object1CreatedAtGormColumnName, nil
	case Object1DeletedAtJSONKeyName:
		return Object1DeletedAtGormColumnName, nil
	case Object1IDJSONKeyName:
		return Object1IDGormColumnName, nil
	case Object1NameJSONKeyName:
		return Object1NameGormColumnName, nil
	case Object1UpdatedAtJSONKeyName:
		return Object1UpdatedAtGormColumnName, nil
	default:
		return "", errors.WithStack(ErrObject1UnsupportedJSONKey)
	}
}

// Transform Object1 JSON Key map To Gorm Column map
func TransformObject1JSONKeyMapToGormColumnMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject1JSONKeyToGormColumn(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject1UnsupportedJSONKey) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object1 Gorm Column map To JSON Key map
func TransformObject1GormColumnMapToJSONKeyMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject1GormColumnToJSONKey(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject1UnsupportedGormColumn) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object1 Struct Key Name To JSON Key
func TransformObject1StructKeyNameToJSONKey(structKey string) (string, error) {
	switch structKey {
	case Object1CreatedAtStructKeyName:
		return Object1CreatedAtJSONKeyName, nil
	case Object1DeletedAtStructKeyName:
		return Object1DeletedAtJSONKeyName, nil
	case Object1IDStructKeyName:
		return Object1IDJSONKeyName, nil
	case Object1NameStructKeyName:
		return Object1NameJSONKeyName, nil
	case Object1UpdatedAtStructKeyName:
		return Object1UpdatedAtJSONKeyName, nil
	default:
		return "", errors.WithStack(ErrObject1UnsupportedStructKeyName)
	}
}

// Transform Object1 JSON Key To Struct Key Name
func TransformObject1JSONKeyToStructKeyName(jsonKey string) (string, error) {
	switch jsonKey {
	case Object1CreatedAtJSONKeyName:
		return Object1CreatedAtStructKeyName, nil
	case Object1DeletedAtJSONKeyName:
		return Object1DeletedAtStructKeyName, nil
	case Object1IDJSONKeyName:
		return Object1IDStructKeyName, nil
	case Object1NameJSONKeyName:
		return Object1NameStructKeyName, nil
	case Object1UpdatedAtJSONKeyName:
		return Object1UpdatedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrObject1UnsupportedJSONKey)
	}
}

// Transform Object1 JSON Key map To Struct Key Name map
func TransformObject1JSONKeyMapToStructKeyNameMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject1JSONKeyToStructKeyName(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject1UnsupportedJSONKey) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object1 Struct Key Name map To JSON Key map
func TransformObject1StructKeyNameMapToJSONKeyMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject1StructKeyNameToJSONKey(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject1UnsupportedStructKeyName) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object1 Struct Key Name To Gorm Column
func TransformObject1StructKeyNameToGormColumn(structKey string) (string, error) {
	switch structKey {
	case Object1CreatedAtStructKeyName:
		return Object1CreatedAtGormColumnName, nil
	case Object1DeletedAtStructKeyName:
		return Object1DeletedAtGormColumnName, nil
	case Object1IDStructKeyName:
		return Object1IDGormColumnName, nil
	case Object1NameStructKeyName:
		return Object1NameGormColumnName, nil
	case Object1UpdatedAtStructKeyName:
		return Object1UpdatedAtGormColumnName, nil
	default:
		return "", errors.WithStack(ErrObject1UnsupportedStructKeyName)
	}
}

// Transform Object1 Gorm Column To Struct Key Name
func TransformObject1GormColumnToStructKeyName(gormC string) (string, error) {
	switch gormC {
	case Object1CreatedAtGormColumnName:
		return Object1CreatedAtStructKeyName, nil
	case Object1DeletedAtGormColumnName:
		return Object1DeletedAtStructKeyName, nil
	case Object1IDGormColumnName:
		return Object1IDStructKeyName, nil
	case Object1NameGormColumnName:
		return Object1NameStructKeyName, nil
	case Object1UpdatedAtGormColumnName:
		return Object1UpdatedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrObject1UnsupportedGormColumn)
	}
}

// Transform Object1 Gorm Column map To Struct Key Name map
func TransformObject1GormColumnMapToStructKeyNameMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject1GormColumnToStructKeyName(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject1UnsupportedGormColumn) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object1 Struct Key Name map To Gorm Column map
func TransformObject1StructKeyNameMapToGormColumnMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject1StructKeyNameToGormColumn(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject1UnsupportedStructKeyName) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}
