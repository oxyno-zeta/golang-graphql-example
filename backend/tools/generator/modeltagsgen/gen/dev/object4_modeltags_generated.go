// Code generated by ModelTags. DO NOT EDIT.
package dev

import "emperror.dev/errors"


// ErrObject4UnsupportedGormColumn will be thrown when an unsupported Gorm column will be found in transform function.
var ErrObject4UnsupportedGormColumn = errors.Sentinel("unsupported gorm column")

// ErrObject4UnsupportedJSONKey will be thrown when an unsupported JSON key will be found in transform function.
var ErrObject4UnsupportedJSONKey = errors.Sentinel("unsupported json key")

// ErrObject4UnsupportedStructKeyName will be thrown when an unsupported structure key will be found in transform function.
var ErrObject4UnsupportedStructKeyName = errors.Sentinel("unsupported struct key")

/*
 * Gorm columns Names
 */
// Object4 CreatedAt Gorm Column Name
const Object4CreatedAtGormColumnName = "created_at"

// Object4 DeletedAt Gorm Column Name
const Object4DeletedAtGormColumnName = "deleted_at"

// Object4 ID Gorm Column Name
const Object4IDGormColumnName = "id"

// Object4 UpdatedAt Gorm Column Name
const Object4UpdatedAtGormColumnName = "updated_at"

var Object4GormColumnNameList = []string{
    Object4CreatedAtGormColumnName,
    Object4DeletedAtGormColumnName,
    Object4IDGormColumnName,
    Object4UpdatedAtGormColumnName,
}

/*
 * JSON Key Names
 */
// Object4 CreatedAt JSON Key Name
const Object4CreatedAtJSONKeyName = "createdAt"

// Object4 DeletedAt JSON Key Name
const Object4DeletedAtJSONKeyName = "deletedAt"

// Object4 ID JSON Key Name
const Object4IDJSONKeyName = "id"

// Object4 Name JSON Key Name
const Object4NameJSONKeyName = "name"

// Object4 UpdatedAt JSON Key Name
const Object4UpdatedAtJSONKeyName = "updatedAt"

var Object4JSONKeyNameList = []string{
    Object4CreatedAtJSONKeyName,
    Object4DeletedAtJSONKeyName,
    Object4IDJSONKeyName,
    Object4NameJSONKeyName,
    Object4UpdatedAtJSONKeyName,
}

/*
 * Struct Key Names
 */
// Object4 CreatedAt Struct Key Name
const Object4CreatedAtStructKeyName = "CreatedAt"

// Object4 DeletedAt Struct Key Name
const Object4DeletedAtStructKeyName = "DeletedAt"

// Object4 ID Struct Key Name
const Object4IDStructKeyName = "ID"

// Object4 Name Struct Key Name
const Object4NameStructKeyName = "Name"

// Object4 UpdatedAt Struct Key Name
const Object4UpdatedAtStructKeyName = "UpdatedAt"

var Object4StructKeyNameList = []string{
    Object4CreatedAtStructKeyName,
    Object4DeletedAtStructKeyName,
    Object4IDStructKeyName,
    Object4NameStructKeyName,
    Object4UpdatedAtStructKeyName,
}


// Transform Object4 Gorm Column To JSON Key
func TransformObject4GormColumnToJSONKey(gormColumn string) (string, error) {
	switch gormColumn {
	case Object4CreatedAtGormColumnName:
		return Object4CreatedAtJSONKeyName, nil
	case Object4DeletedAtGormColumnName:
		return Object4DeletedAtJSONKeyName, nil
	case Object4IDGormColumnName:
		return Object4IDJSONKeyName, nil
	case Object4UpdatedAtGormColumnName:
		return Object4UpdatedAtJSONKeyName, nil
	default:
		return "", errors.WithStack(ErrObject4UnsupportedGormColumn)
	}
}

// Transform Object4 JSON Key To Gorm Column
func TransformObject4JSONKeyToGormColumn(jsonKey string) (string, error) {
	switch jsonKey {
	case Object4CreatedAtJSONKeyName:
		return Object4CreatedAtGormColumnName, nil
	case Object4DeletedAtJSONKeyName:
		return Object4DeletedAtGormColumnName, nil
	case Object4IDJSONKeyName:
		return Object4IDGormColumnName, nil
	case Object4UpdatedAtJSONKeyName:
		return Object4UpdatedAtGormColumnName, nil
	default:
		return "", errors.WithStack(ErrObject4UnsupportedJSONKey)
	}
}

// Transform Object4 JSON Key map To Gorm Column map
func TransformObject4JSONKeyMapToGormColumnMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject4JSONKeyToGormColumn(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject4UnsupportedJSONKey) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object4 Gorm Column map To JSON Key map
func TransformObject4GormColumnMapToJSONKeyMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject4GormColumnToJSONKey(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject4UnsupportedGormColumn) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object4 Struct Key Name To JSON Key
func TransformObject4StructKeyNameToJSONKey(structKey string) (string, error) {
	switch structKey {
	case Object4CreatedAtStructKeyName:
		return Object4CreatedAtJSONKeyName, nil
	case Object4DeletedAtStructKeyName:
		return Object4DeletedAtJSONKeyName, nil
	case Object4IDStructKeyName:
		return Object4IDJSONKeyName, nil
	case Object4NameStructKeyName:
		return Object4NameJSONKeyName, nil
	case Object4UpdatedAtStructKeyName:
		return Object4UpdatedAtJSONKeyName, nil
	default:
		return "", errors.WithStack(ErrObject4UnsupportedStructKeyName)
	}
}

// Transform Object4 JSON Key To Struct Key Name
func TransformObject4JSONKeyToStructKeyName(jsonKey string) (string, error) {
	switch jsonKey {
	case Object4CreatedAtJSONKeyName:
		return Object4CreatedAtStructKeyName, nil
	case Object4DeletedAtJSONKeyName:
		return Object4DeletedAtStructKeyName, nil
	case Object4IDJSONKeyName:
		return Object4IDStructKeyName, nil
	case Object4NameJSONKeyName:
		return Object4NameStructKeyName, nil
	case Object4UpdatedAtJSONKeyName:
		return Object4UpdatedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrObject4UnsupportedJSONKey)
	}
}

// Transform Object4 JSON Key map To Struct Key Name map
func TransformObject4JSONKeyMapToStructKeyNameMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject4JSONKeyToStructKeyName(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject4UnsupportedJSONKey) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object4 Struct Key Name map To JSON Key map
func TransformObject4StructKeyNameMapToJSONKeyMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject4StructKeyNameToJSONKey(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject4UnsupportedStructKeyName) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object4 Struct Key Name To Gorm Column
func TransformObject4StructKeyNameToGormColumn(structKey string) (string, error) {
	switch structKey {
	case Object4CreatedAtStructKeyName:
		return Object4CreatedAtGormColumnName, nil
	case Object4DeletedAtStructKeyName:
		return Object4DeletedAtGormColumnName, nil
	case Object4IDStructKeyName:
		return Object4IDGormColumnName, nil
	case Object4UpdatedAtStructKeyName:
		return Object4UpdatedAtGormColumnName, nil
	default:
		return "", errors.WithStack(ErrObject4UnsupportedStructKeyName)
	}
}

// Transform Object4 Gorm Column To Struct Key Name
func TransformObject4GormColumnToStructKeyName(gormC string) (string, error) {
	switch gormC {
	case Object4CreatedAtGormColumnName:
		return Object4CreatedAtStructKeyName, nil
	case Object4DeletedAtGormColumnName:
		return Object4DeletedAtStructKeyName, nil
	case Object4IDGormColumnName:
		return Object4IDStructKeyName, nil
	case Object4UpdatedAtGormColumnName:
		return Object4UpdatedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrObject4UnsupportedGormColumn)
	}
}

// Transform Object4 Gorm Column map To Struct Key Name map
func TransformObject4GormColumnMapToStructKeyNameMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject4GormColumnToStructKeyName(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject4UnsupportedGormColumn) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object4 Struct Key Name map To Gorm Column map
func TransformObject4StructKeyNameMapToGormColumnMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject4StructKeyNameToGormColumn(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject4UnsupportedStructKeyName) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}
