// Code generated by ModelTags. DO NOT EDIT.
package dev

import "emperror.dev/errors"


// ErrObject2UnsupportedGormColumn will be thrown when an unsupported Gorm column will be found in transform function.
var ErrObject2UnsupportedGormColumn = errors.Sentinel("unsupported gorm column")

// ErrObject2UnsupportedJSONKey will be thrown when an unsupported JSON key will be found in transform function.
var ErrObject2UnsupportedJSONKey = errors.Sentinel("unsupported json key")

// ErrObject2UnsupportedStructKeyName will be thrown when an unsupported structure key will be found in transform function.
var ErrObject2UnsupportedStructKeyName = errors.Sentinel("unsupported struct key")

/*
 * Gorm columns Names
 */
// Object2 CreatedAt Gorm Column Name
const Object2CreatedAtGormColumnName = "created_at"

// Object2 DeletedAt Gorm Column Name
const Object2DeletedAtGormColumnName = "deleted_at"

// Object2 ID Gorm Column Name
const Object2IDGormColumnName = "id"

// Object2 Name Gorm Column Name
const Object2NameGormColumnName = "name"

// Object2 UpdatedAt Gorm Column Name
const Object2UpdatedAtGormColumnName = "updated_at"

var Object2GormColumnNameList = []string{
    Object2CreatedAtGormColumnName,
    Object2DeletedAtGormColumnName,
    Object2IDGormColumnName,
    Object2NameGormColumnName,
    Object2UpdatedAtGormColumnName,
}

/*
 * JSON Key Names
 */
// Object2 CreatedAt JSON Key Name
const Object2CreatedAtJSONKeyName = "createdAt"

// Object2 DeletedAt JSON Key Name
const Object2DeletedAtJSONKeyName = "deletedAt"

// Object2 ID JSON Key Name
const Object2IDJSONKeyName = "id"

// Object2 UpdatedAt JSON Key Name
const Object2UpdatedAtJSONKeyName = "updatedAt"

var Object2JSONKeyNameList = []string{
    Object2CreatedAtJSONKeyName,
    Object2DeletedAtJSONKeyName,
    Object2IDJSONKeyName,
    Object2UpdatedAtJSONKeyName,
}

/*
 * Struct Key Names
 */
// Object2 CreatedAt Struct Key Name
const Object2CreatedAtStructKeyName = "CreatedAt"

// Object2 DeletedAt Struct Key Name
const Object2DeletedAtStructKeyName = "DeletedAt"

// Object2 ID Struct Key Name
const Object2IDStructKeyName = "ID"

// Object2 Name Struct Key Name
const Object2NameStructKeyName = "Name"

// Object2 UpdatedAt Struct Key Name
const Object2UpdatedAtStructKeyName = "UpdatedAt"

var Object2StructKeyNameList = []string{
    Object2CreatedAtStructKeyName,
    Object2DeletedAtStructKeyName,
    Object2IDStructKeyName,
    Object2NameStructKeyName,
    Object2UpdatedAtStructKeyName,
}


// Transform Object2 Gorm Column To JSON Key
func TransformObject2GormColumnToJSONKey(gormColumn string) (string, error) {
	switch gormColumn {
	case Object2CreatedAtGormColumnName:
		return Object2CreatedAtJSONKeyName, nil
	case Object2DeletedAtGormColumnName:
		return Object2DeletedAtJSONKeyName, nil
	case Object2IDGormColumnName:
		return Object2IDJSONKeyName, nil
	case Object2UpdatedAtGormColumnName:
		return Object2UpdatedAtJSONKeyName, nil
	default:
		return "", errors.WithStack(ErrObject2UnsupportedGormColumn)
	}
}

// Transform Object2 JSON Key To Gorm Column
func TransformObject2JSONKeyToGormColumn(jsonKey string) (string, error) {
	switch jsonKey {
	case Object2CreatedAtJSONKeyName:
		return Object2CreatedAtGormColumnName, nil
	case Object2DeletedAtJSONKeyName:
		return Object2DeletedAtGormColumnName, nil
	case Object2IDJSONKeyName:
		return Object2IDGormColumnName, nil
	case Object2UpdatedAtJSONKeyName:
		return Object2UpdatedAtGormColumnName, nil
	default:
		return "", errors.WithStack(ErrObject2UnsupportedJSONKey)
	}
}

// Transform Object2 JSON Key map To Gorm Column map
func TransformObject2JSONKeyMapToGormColumnMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject2JSONKeyToGormColumn(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject2UnsupportedJSONKey) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object2 Gorm Column map To JSON Key map
func TransformObject2GormColumnMapToJSONKeyMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject2GormColumnToJSONKey(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject2UnsupportedGormColumn) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object2 Struct Key Name To JSON Key
func TransformObject2StructKeyNameToJSONKey(structKey string) (string, error) {
	switch structKey {
	case Object2CreatedAtStructKeyName:
		return Object2CreatedAtJSONKeyName, nil
	case Object2DeletedAtStructKeyName:
		return Object2DeletedAtJSONKeyName, nil
	case Object2IDStructKeyName:
		return Object2IDJSONKeyName, nil
	case Object2UpdatedAtStructKeyName:
		return Object2UpdatedAtJSONKeyName, nil
	default:
		return "", errors.WithStack(ErrObject2UnsupportedStructKeyName)
	}
}

// Transform Object2 JSON Key To Struct Key Name
func TransformObject2JSONKeyToStructKeyName(jsonKey string) (string, error) {
	switch jsonKey {
	case Object2CreatedAtJSONKeyName:
		return Object2CreatedAtStructKeyName, nil
	case Object2DeletedAtJSONKeyName:
		return Object2DeletedAtStructKeyName, nil
	case Object2IDJSONKeyName:
		return Object2IDStructKeyName, nil
	case Object2UpdatedAtJSONKeyName:
		return Object2UpdatedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrObject2UnsupportedJSONKey)
	}
}

// Transform Object2 JSON Key map To Struct Key Name map
func TransformObject2JSONKeyMapToStructKeyNameMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject2JSONKeyToStructKeyName(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject2UnsupportedJSONKey) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object2 Struct Key Name map To JSON Key map
func TransformObject2StructKeyNameMapToJSONKeyMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject2StructKeyNameToJSONKey(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject2UnsupportedStructKeyName) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object2 Struct Key Name To Gorm Column
func TransformObject2StructKeyNameToGormColumn(structKey string) (string, error) {
	switch structKey {
	case Object2CreatedAtStructKeyName:
		return Object2CreatedAtGormColumnName, nil
	case Object2DeletedAtStructKeyName:
		return Object2DeletedAtGormColumnName, nil
	case Object2IDStructKeyName:
		return Object2IDGormColumnName, nil
	case Object2NameStructKeyName:
		return Object2NameGormColumnName, nil
	case Object2UpdatedAtStructKeyName:
		return Object2UpdatedAtGormColumnName, nil
	default:
		return "", errors.WithStack(ErrObject2UnsupportedStructKeyName)
	}
}

// Transform Object2 Gorm Column To Struct Key Name
func TransformObject2GormColumnToStructKeyName(gormC string) (string, error) {
	switch gormC {
	case Object2CreatedAtGormColumnName:
		return Object2CreatedAtStructKeyName, nil
	case Object2DeletedAtGormColumnName:
		return Object2DeletedAtStructKeyName, nil
	case Object2IDGormColumnName:
		return Object2IDStructKeyName, nil
	case Object2NameGormColumnName:
		return Object2NameStructKeyName, nil
	case Object2UpdatedAtGormColumnName:
		return Object2UpdatedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrObject2UnsupportedGormColumn)
	}
}

// Transform Object2 Gorm Column map To Struct Key Name map
func TransformObject2GormColumnMapToStructKeyNameMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject2GormColumnToStructKeyName(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject2UnsupportedGormColumn) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object2 Struct Key Name map To Gorm Column map
func TransformObject2StructKeyNameMapToGormColumnMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject2StructKeyNameToGormColumn(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject2UnsupportedStructKeyName) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}
