// Code generated by ModelTags. DO NOT EDIT.
package dev

import "emperror.dev/errors"


// ErrObject5UnsupportedGormColumn will be thrown when an unsupported Gorm column will be found in transform function.
var ErrObject5UnsupportedGormColumn = errors.Sentinel("unsupported gorm column")

// ErrObject5UnsupportedJSONKey will be thrown when an unsupported JSON key will be found in transform function.
var ErrObject5UnsupportedJSONKey = errors.Sentinel("unsupported json key")

// ErrObject5UnsupportedStructKeyName will be thrown when an unsupported structure key will be found in transform function.
var ErrObject5UnsupportedStructKeyName = errors.Sentinel("unsupported struct key")

/*
 * Gorm columns Names
 */
// Object5 CreatedAt Gorm Column Name
const Object5CreatedAtGormColumnName = "created_at"

// Object5 DeletedAt Gorm Column Name
const Object5DeletedAtGormColumnName = "deleted_at"

// Object5 ID Gorm Column Name
const Object5IDGormColumnName = "id"

// Object5 Name Gorm Column Name
const Object5NameGormColumnName = "name"

// Object5 UpdatedAt Gorm Column Name
const Object5UpdatedAtGormColumnName = "updated_at"

var Object5GormColumnNameList = []string{
    Object5CreatedAtGormColumnName,
    Object5DeletedAtGormColumnName,
    Object5IDGormColumnName,
    Object5NameGormColumnName,
    Object5UpdatedAtGormColumnName,
}

/*
 * JSON Key Names
 */
// Object5 CreatedAt JSON Key Name
const Object5CreatedAtJSONKeyName = "createdAt"

// Object5 DeletedAt JSON Key Name
const Object5DeletedAtJSONKeyName = "deletedAt"

// Object5 ID JSON Key Name
const Object5IDJSONKeyName = "id"

// Object5 Name JSON Key Name
const Object5NameJSONKeyName = "name"

// Object5 UpdatedAt JSON Key Name
const Object5UpdatedAtJSONKeyName = "updatedAt"

var Object5JSONKeyNameList = []string{
    Object5CreatedAtJSONKeyName,
    Object5DeletedAtJSONKeyName,
    Object5IDJSONKeyName,
    Object5NameJSONKeyName,
    Object5UpdatedAtJSONKeyName,
}

/*
 * Struct Key Names
 */
// Object5 CreatedAt Struct Key Name
const Object5CreatedAtStructKeyName = "CreatedAt"

// Object5 DeletedAt Struct Key Name
const Object5DeletedAtStructKeyName = "DeletedAt"

// Object5 ID Struct Key Name
const Object5IDStructKeyName = "ID"

// Object5 Name Struct Key Name
const Object5NameStructKeyName = "Name"

// Object5 UpdatedAt Struct Key Name
const Object5UpdatedAtStructKeyName = "UpdatedAt"

var Object5StructKeyNameList = []string{
    Object5CreatedAtStructKeyName,
    Object5DeletedAtStructKeyName,
    Object5IDStructKeyName,
    Object5NameStructKeyName,
    Object5UpdatedAtStructKeyName,
}


// Transform Object5 Gorm Column To JSON Key
func TransformObject5GormColumnToJSONKey(gormColumn string) (string, error) {
	switch gormColumn {
	case Object5CreatedAtGormColumnName:
		return Object5CreatedAtJSONKeyName, nil
	case Object5DeletedAtGormColumnName:
		return Object5DeletedAtJSONKeyName, nil
	case Object5IDGormColumnName:
		return Object5IDJSONKeyName, nil
	case Object5NameGormColumnName:
		return Object5NameJSONKeyName, nil
	case Object5UpdatedAtGormColumnName:
		return Object5UpdatedAtJSONKeyName, nil
	default:
		return "", errors.WithStack(ErrObject5UnsupportedGormColumn)
	}
}

// Transform Object5 JSON Key To Gorm Column
func TransformObject5JSONKeyToGormColumn(jsonKey string) (string, error) {
	switch jsonKey {
	case Object5CreatedAtJSONKeyName:
		return Object5CreatedAtGormColumnName, nil
	case Object5DeletedAtJSONKeyName:
		return Object5DeletedAtGormColumnName, nil
	case Object5IDJSONKeyName:
		return Object5IDGormColumnName, nil
	case Object5NameJSONKeyName:
		return Object5NameGormColumnName, nil
	case Object5UpdatedAtJSONKeyName:
		return Object5UpdatedAtGormColumnName, nil
	default:
		return "", errors.WithStack(ErrObject5UnsupportedJSONKey)
	}
}

// Transform Object5 JSON Key map To Gorm Column map
func TransformObject5JSONKeyMapToGormColumnMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject5JSONKeyToGormColumn(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject5UnsupportedJSONKey) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object5 Gorm Column map To JSON Key map
func TransformObject5GormColumnMapToJSONKeyMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject5GormColumnToJSONKey(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject5UnsupportedGormColumn) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object5 Struct Key Name To JSON Key
func TransformObject5StructKeyNameToJSONKey(structKey string) (string, error) {
	switch structKey {
	case Object5CreatedAtStructKeyName:
		return Object5CreatedAtJSONKeyName, nil
	case Object5DeletedAtStructKeyName:
		return Object5DeletedAtJSONKeyName, nil
	case Object5IDStructKeyName:
		return Object5IDJSONKeyName, nil
	case Object5NameStructKeyName:
		return Object5NameJSONKeyName, nil
	case Object5UpdatedAtStructKeyName:
		return Object5UpdatedAtJSONKeyName, nil
	default:
		return "", errors.WithStack(ErrObject5UnsupportedStructKeyName)
	}
}

// Transform Object5 JSON Key To Struct Key Name
func TransformObject5JSONKeyToStructKeyName(jsonKey string) (string, error) {
	switch jsonKey {
	case Object5CreatedAtJSONKeyName:
		return Object5CreatedAtStructKeyName, nil
	case Object5DeletedAtJSONKeyName:
		return Object5DeletedAtStructKeyName, nil
	case Object5IDJSONKeyName:
		return Object5IDStructKeyName, nil
	case Object5NameJSONKeyName:
		return Object5NameStructKeyName, nil
	case Object5UpdatedAtJSONKeyName:
		return Object5UpdatedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrObject5UnsupportedJSONKey)
	}
}

// Transform Object5 JSON Key map To Struct Key Name map
func TransformObject5JSONKeyMapToStructKeyNameMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject5JSONKeyToStructKeyName(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject5UnsupportedJSONKey) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object5 Struct Key Name map To JSON Key map
func TransformObject5StructKeyNameMapToJSONKeyMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject5StructKeyNameToJSONKey(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject5UnsupportedStructKeyName) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object5 Struct Key Name To Gorm Column
func TransformObject5StructKeyNameToGormColumn(structKey string) (string, error) {
	switch structKey {
	case Object5CreatedAtStructKeyName:
		return Object5CreatedAtGormColumnName, nil
	case Object5DeletedAtStructKeyName:
		return Object5DeletedAtGormColumnName, nil
	case Object5IDStructKeyName:
		return Object5IDGormColumnName, nil
	case Object5NameStructKeyName:
		return Object5NameGormColumnName, nil
	case Object5UpdatedAtStructKeyName:
		return Object5UpdatedAtGormColumnName, nil
	default:
		return "", errors.WithStack(ErrObject5UnsupportedStructKeyName)
	}
}

// Transform Object5 Gorm Column To Struct Key Name
func TransformObject5GormColumnToStructKeyName(gormC string) (string, error) {
	switch gormC {
	case Object5CreatedAtGormColumnName:
		return Object5CreatedAtStructKeyName, nil
	case Object5DeletedAtGormColumnName:
		return Object5DeletedAtStructKeyName, nil
	case Object5IDGormColumnName:
		return Object5IDStructKeyName, nil
	case Object5NameGormColumnName:
		return Object5NameStructKeyName, nil
	case Object5UpdatedAtGormColumnName:
		return Object5UpdatedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrObject5UnsupportedGormColumn)
	}
}

// Transform Object5 Gorm Column map To Struct Key Name map
func TransformObject5GormColumnMapToStructKeyNameMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject5GormColumnToStructKeyName(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject5UnsupportedGormColumn) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}

// Transform Object5 Struct Key Name map To Gorm Column map
func TransformObject5StructKeyNameMapToGormColumnMap(
	input map[string]interface{},
	ignoreUnsupportedError bool,
) (map[string]interface{}, error) {
	// Rebuild
	m := map[string]interface{}{}
	// Loop over input
	for k, v := range input {
		r, err := TransformObject5StructKeyNameToGormColumn(k)
		// Check error
		if err != nil {
			// Check if ignore is enabled and error is matching
			if ignoreUnsupportedError && errors.Is(err, ErrObject5UnsupportedStructKeyName) {
				// Continue the loop
				continue
			}

			// Return
			return nil, err
		}
		// Save
		m[r] = v
	}

	return m, nil
}
