// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/metrics (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_Service.go -package=mocks github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/metrics Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	graphql "github.com/99designs/gqlgen/graphql"
	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DatabaseMiddleware mocks base method.
func (m *MockService) DatabaseMiddleware(connectionName string) gorm.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseMiddleware", connectionName)
	ret0, _ := ret[0].(gorm.Plugin)
	return ret0
}

// DatabaseMiddleware indicates an expected call of DatabaseMiddleware.
func (mr *MockServiceMockRecorder) DatabaseMiddleware(connectionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseMiddleware", reflect.TypeOf((*MockService)(nil).DatabaseMiddleware), connectionName)
}

// DownFailedConfigReload mocks base method.
func (m *MockService) DownFailedConfigReload() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DownFailedConfigReload")
}

// DownFailedConfigReload indicates an expected call of DownFailedConfigReload.
func (mr *MockServiceMockRecorder) DownFailedConfigReload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownFailedConfigReload", reflect.TypeOf((*MockService)(nil).DownFailedConfigReload))
}

// GraphqlMiddleware mocks base method.
func (m *MockService) GraphqlMiddleware() graphql.HandlerExtension {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphqlMiddleware")
	ret0, _ := ret[0].(graphql.HandlerExtension)
	return ret0
}

// GraphqlMiddleware indicates an expected call of GraphqlMiddleware.
func (mr *MockServiceMockRecorder) GraphqlMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphqlMiddleware", reflect.TypeOf((*MockService)(nil).GraphqlMiddleware))
}

// IncreaseFailedAMQPConsumedMessage mocks base method.
func (m *MockService) IncreaseFailedAMQPConsumedMessage(queue, consumerTag, routingKey string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseFailedAMQPConsumedMessage", queue, consumerTag, routingKey)
}

// IncreaseFailedAMQPConsumedMessage indicates an expected call of IncreaseFailedAMQPConsumedMessage.
func (mr *MockServiceMockRecorder) IncreaseFailedAMQPConsumedMessage(queue, consumerTag, routingKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseFailedAMQPConsumedMessage", reflect.TypeOf((*MockService)(nil).IncreaseFailedAMQPConsumedMessage), queue, consumerTag, routingKey)
}

// IncreaseFailedAMQPPublishedMessage mocks base method.
func (m *MockService) IncreaseFailedAMQPPublishedMessage(exchange, routingKey string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseFailedAMQPPublishedMessage", exchange, routingKey)
}

// IncreaseFailedAMQPPublishedMessage indicates an expected call of IncreaseFailedAMQPPublishedMessage.
func (mr *MockServiceMockRecorder) IncreaseFailedAMQPPublishedMessage(exchange, routingKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseFailedAMQPPublishedMessage", reflect.TypeOf((*MockService)(nil).IncreaseFailedAMQPPublishedMessage), exchange, routingKey)
}

// IncreaseSuccessfullyAMQPConsumedMessage mocks base method.
func (m *MockService) IncreaseSuccessfullyAMQPConsumedMessage(queue, consumerTag, routingKey string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseSuccessfullyAMQPConsumedMessage", queue, consumerTag, routingKey)
}

// IncreaseSuccessfullyAMQPConsumedMessage indicates an expected call of IncreaseSuccessfullyAMQPConsumedMessage.
func (mr *MockServiceMockRecorder) IncreaseSuccessfullyAMQPConsumedMessage(queue, consumerTag, routingKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseSuccessfullyAMQPConsumedMessage", reflect.TypeOf((*MockService)(nil).IncreaseSuccessfullyAMQPConsumedMessage), queue, consumerTag, routingKey)
}

// IncreaseSuccessfullyAMQPPublishedMessage mocks base method.
func (m *MockService) IncreaseSuccessfullyAMQPPublishedMessage(exchange, routingKey string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseSuccessfullyAMQPPublishedMessage", exchange, routingKey)
}

// IncreaseSuccessfullyAMQPPublishedMessage indicates an expected call of IncreaseSuccessfullyAMQPPublishedMessage.
func (mr *MockServiceMockRecorder) IncreaseSuccessfullyAMQPPublishedMessage(exchange, routingKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseSuccessfullyAMQPPublishedMessage", reflect.TypeOf((*MockService)(nil).IncreaseSuccessfullyAMQPPublishedMessage), exchange, routingKey)
}

// Instrument mocks base method.
func (m *MockService) Instrument(serverName string, routerPath bool) gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instrument", serverName, routerPath)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Instrument indicates an expected call of Instrument.
func (mr *MockServiceMockRecorder) Instrument(serverName, routerPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instrument", reflect.TypeOf((*MockService)(nil).Instrument), serverName, routerPath)
}

// PrometheusHTTPHandler mocks base method.
func (m *MockService) PrometheusHTTPHandler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusHTTPHandler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// PrometheusHTTPHandler indicates an expected call of PrometheusHTTPHandler.
func (mr *MockServiceMockRecorder) PrometheusHTTPHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusHTTPHandler", reflect.TypeOf((*MockService)(nil).PrometheusHTTPHandler))
}

// UpFailedConfigReload mocks base method.
func (m *MockService) UpFailedConfigReload() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpFailedConfigReload")
}

// UpFailedConfigReload indicates an expected call of UpFailedConfigReload.
func (mr *MockServiceMockRecorder) UpFailedConfigReload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpFailedConfigReload", reflect.TypeOf((*MockService)(nil).UpFailedConfigReload))
}
