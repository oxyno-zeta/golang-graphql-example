// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/metrics (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	graphql "github.com/99designs/gqlgen/graphql"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DatabaseMiddleware mocks base method.
func (m *MockClient) DatabaseMiddleware(arg0 string) gorm.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseMiddleware", arg0)
	ret0, _ := ret[0].(gorm.Plugin)
	return ret0
}

// DatabaseMiddleware indicates an expected call of DatabaseMiddleware.
func (mr *MockClientMockRecorder) DatabaseMiddleware(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseMiddleware", reflect.TypeOf((*MockClient)(nil).DatabaseMiddleware), arg0)
}

// GraphqlMiddleware mocks base method.
func (m *MockClient) GraphqlMiddleware() graphql.HandlerExtension {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphqlMiddleware")
	ret0, _ := ret[0].(graphql.HandlerExtension)
	return ret0
}

// GraphqlMiddleware indicates an expected call of GraphqlMiddleware.
func (mr *MockClientMockRecorder) GraphqlMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphqlMiddleware", reflect.TypeOf((*MockClient)(nil).GraphqlMiddleware))
}

// Instrument mocks base method.
func (m *MockClient) Instrument(arg0 string) gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instrument", arg0)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Instrument indicates an expected call of Instrument.
func (mr *MockClientMockRecorder) Instrument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instrument", reflect.TypeOf((*MockClient)(nil).Instrument), arg0)
}

// PrometheusHTTPHandler mocks base method.
func (m *MockClient) PrometheusHTTPHandler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusHTTPHandler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// PrometheusHTTPHandler indicates an expected call of PrometheusHTTPHandler.
func (mr *MockClientMockRecorder) PrometheusHTTPHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusHTTPHandler", reflect.TypeOf((*MockClient)(nil).PrometheusHTTPHandler))
}
