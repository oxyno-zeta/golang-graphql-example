// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/config (interfaces: MetricsService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_MetricsService.go -package=mocks github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/config MetricsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricsService is a mock of MetricsService interface.
type MockMetricsService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServiceMockRecorder
}

// MockMetricsServiceMockRecorder is the mock recorder for MockMetricsService.
type MockMetricsServiceMockRecorder struct {
	mock *MockMetricsService
}

// NewMockMetricsService creates a new mock instance.
func NewMockMetricsService(ctrl *gomock.Controller) *MockMetricsService {
	mock := &MockMetricsService{ctrl: ctrl}
	mock.recorder = &MockMetricsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsService) EXPECT() *MockMetricsServiceMockRecorder {
	return m.recorder
}

// DownFailedConfigReload mocks base method.
func (m *MockMetricsService) DownFailedConfigReload() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DownFailedConfigReload")
}

// DownFailedConfigReload indicates an expected call of DownFailedConfigReload.
func (mr *MockMetricsServiceMockRecorder) DownFailedConfigReload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownFailedConfigReload", reflect.TypeOf((*MockMetricsService)(nil).DownFailedConfigReload))
}

// UpFailedConfigReload mocks base method.
func (m *MockMetricsService) UpFailedConfigReload() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpFailedConfigReload")
}

// UpFailedConfigReload indicates an expected call of UpFailedConfigReload.
func (mr *MockMetricsServiceMockRecorder) UpFailedConfigReload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpFailedConfigReload", reflect.TypeOf((*MockMetricsService)(nil).UpFailedConfigReload))
}
