// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/config (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_Manager.go -package=mocks github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/config Manager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	config "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/config"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddOnChangeHook mocks base method.
func (m *MockManager) AddOnChangeHook(input *config.HookDefinition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOnChangeHook", input)
}

// AddOnChangeHook indicates an expected call of AddOnChangeHook.
func (mr *MockManagerMockRecorder) AddOnChangeHook(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnChangeHook", reflect.TypeOf((*MockManager)(nil).AddOnChangeHook), input)
}

// GetConfig mocks base method.
func (m *MockManager) GetConfig() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockManagerMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockManager)(nil).GetConfig))
}

// InitializeOnce mocks base method.
func (m *MockManager) InitializeOnce() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeOnce")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeOnce indicates an expected call of InitializeOnce.
func (mr *MockManagerMockRecorder) InitializeOnce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeOnce", reflect.TypeOf((*MockManager)(nil).InitializeOnce))
}

// Load mocks base method.
func (m *MockManager) Load(inputConfigFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", inputConfigFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockManagerMockRecorder) Load(inputConfigFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockManager)(nil).Load), inputConfigFilePath)
}

// SetExtraServices mocks base method.
func (m *MockManager) SetExtraServices(metricsSvc config.MetricsService) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExtraServices", metricsSvc)
}

// SetExtraServices indicates an expected call of SetExtraServices.
func (mr *MockManagerMockRecorder) SetExtraServices(metricsSvc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtraServices", reflect.TypeOf((*MockManager)(nil).SetExtraServices), metricsSvc)
}
