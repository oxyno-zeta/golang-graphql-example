// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/authx/authentication (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_Service.go -package=mocks github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/authx/authentication Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	regexp "regexp"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Middleware mocks base method.
func (m *MockService) Middleware(unauthorizedPathRegexList []*regexp.Regexp) gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", unauthorizedPathRegexList)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockServiceMockRecorder) Middleware(unauthorizedPathRegexList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockService)(nil).Middleware), unauthorizedPathRegexList)
}

// OIDCEndpoints mocks base method.
func (m *MockService) OIDCEndpoints(router gin.IRouter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OIDCEndpoints", router)
	ret0, _ := ret[0].(error)
	return ret0
}

// OIDCEndpoints indicates an expected call of OIDCEndpoints.
func (mr *MockServiceMockRecorder) OIDCEndpoints(router any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OIDCEndpoints", reflect.TypeOf((*MockService)(nil).OIDCEndpoints), router)
}
