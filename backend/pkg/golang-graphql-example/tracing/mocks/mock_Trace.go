// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/tracing (interfaces: Trace)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_Trace.go -package=mocks github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/tracing Trace
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	tracing "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/tracing"
	gomock "go.uber.org/mock/gomock"
)

// MockTrace is a mock of Trace interface.
type MockTrace struct {
	ctrl     *gomock.Controller
	recorder *MockTraceMockRecorder
	isgomock struct{}
}

// MockTraceMockRecorder is the mock recorder for MockTrace.
type MockTraceMockRecorder struct {
	mock *MockTrace
}

// NewMockTrace creates a new mock instance.
func NewMockTrace(ctrl *gomock.Controller) *MockTrace {
	mock := &MockTrace{ctrl: ctrl}
	mock.recorder = &MockTraceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrace) EXPECT() *MockTraceMockRecorder {
	return m.recorder
}

// AddAndMarkError mocks base method.
func (m *MockTrace) AddAndMarkError(err error, opts ...tracing.TraceEventOption) {
	m.ctrl.T.Helper()
	varargs := []any{err}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddAndMarkError", varargs...)
}

// AddAndMarkError indicates an expected call of AddAndMarkError.
func (mr *MockTraceMockRecorder) AddAndMarkError(err any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAndMarkError", reflect.TypeOf((*MockTrace)(nil).AddAndMarkError), varargs...)
}

// AddError mocks base method.
func (m *MockTrace) AddError(err error, opts ...tracing.TraceEventOption) {
	m.ctrl.T.Helper()
	varargs := []any{err}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddError", varargs...)
}

// AddError indicates an expected call of AddError.
func (mr *MockTraceMockRecorder) AddError(err any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockTrace)(nil).AddError), varargs...)
}

// AddEvent mocks base method.
func (m *MockTrace) AddEvent(eventName string, opts ...tracing.TraceEventOption) {
	m.ctrl.T.Helper()
	varargs := []any{eventName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddEvent", varargs...)
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockTraceMockRecorder) AddEvent(eventName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{eventName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockTrace)(nil).AddEvent), varargs...)
}

// Finish mocks base method.
func (m *MockTrace) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish.
func (mr *MockTraceMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockTrace)(nil).Finish))
}

// GetChildTrace mocks base method.
func (m *MockTrace) GetChildTrace(ctx context.Context, operationName string) (context.Context, tracing.Trace) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildTrace", ctx, operationName)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(tracing.Trace)
	return ret0, ret1
}

// GetChildTrace indicates an expected call of GetChildTrace.
func (mr *MockTraceMockRecorder) GetChildTrace(ctx, operationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildTrace", reflect.TypeOf((*MockTrace)(nil).GetChildTrace), ctx, operationName)
}

// GetTraceID mocks base method.
func (m *MockTrace) GetTraceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTraceID indicates an expected call of GetTraceID.
func (mr *MockTraceMockRecorder) GetTraceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceID", reflect.TypeOf((*MockTrace)(nil).GetTraceID))
}

// InjectInHTTPHeader mocks base method.
func (m *MockTrace) InjectInHTTPHeader(header http.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InjectInHTTPHeader", header)
}

// InjectInHTTPHeader indicates an expected call of InjectInHTTPHeader.
func (mr *MockTraceMockRecorder) InjectInHTTPHeader(header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectInHTTPHeader", reflect.TypeOf((*MockTrace)(nil).InjectInHTTPHeader), header)
}

// InjectInTextMap mocks base method.
func (m *MockTrace) InjectInTextMap(textMap map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InjectInTextMap", textMap)
}

// InjectInTextMap indicates an expected call of InjectInTextMap.
func (mr *MockTraceMockRecorder) InjectInTextMap(textMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectInTextMap", reflect.TypeOf((*MockTrace)(nil).InjectInTextMap), textMap)
}

// MarkAsError mocks base method.
func (m *MockTrace) MarkAsError() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkAsError")
}

// MarkAsError indicates an expected call of MarkAsError.
func (mr *MockTraceMockRecorder) MarkAsError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsError", reflect.TypeOf((*MockTrace)(nil).MarkAsError))
}

// SetTag mocks base method.
func (m *MockTrace) SetTag(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTag", key, value)
}

// SetTag indicates an expected call of SetTag.
func (mr *MockTraceMockRecorder) SetTag(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTag", reflect.TypeOf((*MockTrace)(nil).SetTag), key, value)
}

// SetTags mocks base method.
func (m *MockTrace) SetTags(tags map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTags", tags)
}

// SetTags indicates an expected call of SetTags.
func (mr *MockTraceMockRecorder) SetTags(tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockTrace)(nil).SetTags), tags)
}
