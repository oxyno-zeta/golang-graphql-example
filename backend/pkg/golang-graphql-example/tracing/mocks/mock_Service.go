// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/tracing (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_Service.go -package=mocks github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/tracing Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	graphql "github.com/99designs/gqlgen/graphql"
	gin "github.com/gin-gonic/gin"
	tracing "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/tracing"
	trace "go.opentelemetry.io/otel/trace"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close))
}

// DatabaseMiddleware mocks base method.
func (m *MockService) DatabaseMiddleware() gorm.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseMiddleware")
	ret0, _ := ret[0].(gorm.Plugin)
	return ret0
}

// DatabaseMiddleware indicates an expected call of DatabaseMiddleware.
func (mr *MockServiceMockRecorder) DatabaseMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseMiddleware", reflect.TypeOf((*MockService)(nil).DatabaseMiddleware))
}

// GraphqlMiddleware mocks base method.
func (m *MockService) GraphqlMiddleware() graphql.HandlerExtension {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphqlMiddleware")
	ret0, _ := ret[0].(graphql.HandlerExtension)
	return ret0
}

// GraphqlMiddleware indicates an expected call of GraphqlMiddleware.
func (mr *MockServiceMockRecorder) GraphqlMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphqlMiddleware", reflect.TypeOf((*MockService)(nil).GraphqlMiddleware))
}

// HTTPMiddlewareList mocks base method.
func (m *MockService) HTTPMiddlewareList(getRequestID func(context.Context) string) []gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPMiddlewareList", getRequestID)
	ret0, _ := ret[0].([]gin.HandlerFunc)
	return ret0
}

// HTTPMiddlewareList indicates an expected call of HTTPMiddlewareList.
func (mr *MockServiceMockRecorder) HTTPMiddlewareList(getRequestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPMiddlewareList", reflect.TypeOf((*MockService)(nil).HTTPMiddlewareList), getRequestID)
}

// InitializeAndReload mocks base method.
func (m *MockService) InitializeAndReload() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeAndReload")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeAndReload indicates an expected call of InitializeAndReload.
func (mr *MockServiceMockRecorder) InitializeAndReload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeAndReload", reflect.TypeOf((*MockService)(nil).InitializeAndReload))
}

// StartTrace mocks base method.
func (m *MockService) StartTrace(ctx context.Context, operationName string, opts ...trace.SpanStartOption) (context.Context, tracing.Trace) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, operationName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTrace", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(tracing.Trace)
	return ret0, ret1
}

// StartTrace indicates an expected call of StartTrace.
func (mr *MockServiceMockRecorder) StartTrace(ctx, operationName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, operationName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTrace", reflect.TypeOf((*MockService)(nil).StartTrace), varargs...)
}
