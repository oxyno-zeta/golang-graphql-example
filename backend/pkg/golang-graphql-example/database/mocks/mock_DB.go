// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/database (interfaces: DB)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_DB.go -package=mocks github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/database DB
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	database "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/database"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
	isgomock struct{}
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Connect mocks base method.
func (m *MockDB) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDBMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDB)(nil).Connect))
}

// ExecuteTransaction mocks base method.
func (m *MockDB) ExecuteTransaction(ctx context.Context, cb func(context.Context) error, opts ...database.TransactionOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, cb}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteTransaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteTransaction indicates an expected call of ExecuteTransaction.
func (mr *MockDBMockRecorder) ExecuteTransaction(ctx, cb any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, cb}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTransaction", reflect.TypeOf((*MockDB)(nil).ExecuteTransaction), varargs...)
}

// GetGormDB mocks base method.
func (m *MockDB) GetGormDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGormDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetGormDB indicates an expected call of GetGormDB.
func (mr *MockDBMockRecorder) GetGormDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormDB", reflect.TypeOf((*MockDB)(nil).GetGormDB))
}

// GetSQLDB mocks base method.
func (m *MockDB) GetSQLDB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLDB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLDB indicates an expected call of GetSQLDB.
func (mr *MockDBMockRecorder) GetSQLDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLDB", reflect.TypeOf((*MockDB)(nil).GetSQLDB))
}

// GetTransactionalOrDefaultGormDB mocks base method.
func (m *MockDB) GetTransactionalOrDefaultGormDB(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionalOrDefaultGormDB", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetTransactionalOrDefaultGormDB indicates an expected call of GetTransactionalOrDefaultGormDB.
func (mr *MockDBMockRecorder) GetTransactionalOrDefaultGormDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionalOrDefaultGormDB", reflect.TypeOf((*MockDB)(nil).GetTransactionalOrDefaultGormDB), ctx)
}

// Ping mocks base method.
func (m *MockDB) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDB)(nil).Ping))
}

// Reconnect mocks base method.
func (m *MockDB) Reconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconnect indicates an expected call of Reconnect.
func (mr *MockDBMockRecorder) Reconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockDB)(nil).Reconnect))
}
