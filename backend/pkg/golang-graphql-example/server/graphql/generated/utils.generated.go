// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/database/common"
	"github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/server/graphql/utils"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type BooleanFilterResolver interface {
	Eq(ctx context.Context, obj *common.GenericFilter, data *bool) error
	NotEq(ctx context.Context, obj *common.GenericFilter, data *bool) error
}
type DateFilterResolver interface {
	Eq(ctx context.Context, obj *common.DateFilter, data *string) error
	NotEq(ctx context.Context, obj *common.DateFilter, data *string) error
	Gte(ctx context.Context, obj *common.DateFilter, data *string) error
	NotGte(ctx context.Context, obj *common.DateFilter, data *string) error
	Gt(ctx context.Context, obj *common.DateFilter, data *string) error
	NotGt(ctx context.Context, obj *common.DateFilter, data *string) error
	Lte(ctx context.Context, obj *common.DateFilter, data *string) error
	NotLte(ctx context.Context, obj *common.DateFilter, data *string) error
	Lt(ctx context.Context, obj *common.DateFilter, data *string) error
	NotLt(ctx context.Context, obj *common.DateFilter, data *string) error
	In(ctx context.Context, obj *common.DateFilter, data []*string) error
	NotIn(ctx context.Context, obj *common.DateFilter, data []*string) error
}
type IntFilterResolver interface {
	Eq(ctx context.Context, obj *common.GenericFilter, data *int) error
	NotEq(ctx context.Context, obj *common.GenericFilter, data *int) error
	Gte(ctx context.Context, obj *common.GenericFilter, data *int) error
	NotGte(ctx context.Context, obj *common.GenericFilter, data *int) error
	Gt(ctx context.Context, obj *common.GenericFilter, data *int) error
	NotGt(ctx context.Context, obj *common.GenericFilter, data *int) error
	Lte(ctx context.Context, obj *common.GenericFilter, data *int) error
	NotLte(ctx context.Context, obj *common.GenericFilter, data *int) error
	Lt(ctx context.Context, obj *common.GenericFilter, data *int) error
	NotLt(ctx context.Context, obj *common.GenericFilter, data *int) error
	In(ctx context.Context, obj *common.GenericFilter, data []*int) error
	NotIn(ctx context.Context, obj *common.GenericFilter, data []*int) error
}
type StringFilterResolver interface {
	Eq(ctx context.Context, obj *common.GenericFilter, data *string) error
	NotEq(ctx context.Context, obj *common.GenericFilter, data *string) error
	Contains(ctx context.Context, obj *common.GenericFilter, data *string) error
	NotContains(ctx context.Context, obj *common.GenericFilter, data *string) error
	StartsWith(ctx context.Context, obj *common.GenericFilter, data *string) error
	NotStartsWith(ctx context.Context, obj *common.GenericFilter, data *string) error
	EndsWith(ctx context.Context, obj *common.GenericFilter, data *string) error
	NotEndsWith(ctx context.Context, obj *common.GenericFilter, data *string) error
	In(ctx context.Context, obj *common.GenericFilter, data []*string) error
	NotIn(ctx context.Context, obj *common.GenericFilter, data []*string) error
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *utils.PageInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PageInfo_hasNextPage,
		func(ctx context.Context) (any, error) {
			return obj.HasNextPage, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *utils.PageInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PageInfo_hasPreviousPage,
		func(ctx context.Context) (any, error) {
			return obj.HasPreviousPage, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *utils.PageInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PageInfo_startCursor,
		func(ctx context.Context) (any, error) {
			return obj.StartCursor, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *utils.PageInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PageInfo_endCursor,
		func(ctx context.Context) (any, error) {
			return obj.EndCursor, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBooleanFilter(ctx context.Context, obj any) (common.GenericFilter, error) {
	var it common.GenericFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "notEq"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BooleanFilter().Eq(ctx, &it, data); err != nil {
				return it, err
			}
		case "notEq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BooleanFilter().NotEq(ctx, &it, data); err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateFilter(ctx context.Context, obj any) (common.DateFilter, error) {
	var it common.DateFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "notEq", "gte", "notGte", "gt", "notGt", "lte", "notLte", "lt", "notLt", "in", "notIn", "isNull", "isNotNull"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().Eq(ctx, &it, data); err != nil {
				return it, err
			}
		case "notEq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().NotEq(ctx, &it, data); err != nil {
				return it, err
			}
		case "gte":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gte"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().Gte(ctx, &it, data); err != nil {
				return it, err
			}
		case "notGte":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notGte"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().NotGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "gt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().Gt(ctx, &it, data); err != nil {
				return it, err
			}
		case "notGt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notGt"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().NotGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "lte":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lte"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().Lte(ctx, &it, data); err != nil {
				return it, err
			}
		case "notLte":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notLte"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().NotLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "lt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().Lt(ctx, &it, data); err != nil {
				return it, err
			}
		case "notLt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notLt"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().NotLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			data, err := ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().In(ctx, &it, data); err != nil {
				return it, err
			}
		case "notIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notIn"))
			data, err := ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DateFilter().NotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "isNull":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isNull"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsNull = data
		case "isNotNull":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isNotNull"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsNotNull = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntFilter(ctx context.Context, obj any) (common.GenericFilter, error) {
	var it common.GenericFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "notEq", "gte", "notGte", "gt", "notGt", "lte", "notLte", "lt", "notLt", "in", "notIn", "isNull", "isNotNull"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().Eq(ctx, &it, data); err != nil {
				return it, err
			}
		case "notEq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().NotEq(ctx, &it, data); err != nil {
				return it, err
			}
		case "gte":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gte"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().Gte(ctx, &it, data); err != nil {
				return it, err
			}
		case "notGte":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notGte"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().NotGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "gt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().Gt(ctx, &it, data); err != nil {
				return it, err
			}
		case "notGt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notGt"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().NotGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "lte":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lte"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().Lte(ctx, &it, data); err != nil {
				return it, err
			}
		case "notLte":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notLte"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().NotLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "lt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().Lt(ctx, &it, data); err != nil {
				return it, err
			}
		case "notLt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notLt"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().NotLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			data, err := ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().In(ctx, &it, data); err != nil {
				return it, err
			}
		case "notIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notIn"))
			data, err := ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.IntFilter().NotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "isNull":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isNull"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsNull = data
		case "isNotNull":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isNotNull"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsNotNull = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFilter(ctx context.Context, obj any) (common.GenericFilter, error) {
	var it common.GenericFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eq", "notEq", "contains", "notContains", "startsWith", "notStartsWith", "endsWith", "notEndsWith", "in", "notIn", "isNull", "isNotNull", "caseInsensitive"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().Eq(ctx, &it, data); err != nil {
				return it, err
			}
		case "notEq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEq"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().NotEq(ctx, &it, data); err != nil {
				return it, err
			}
		case "contains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().Contains(ctx, &it, data); err != nil {
				return it, err
			}
		case "notContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().NotContains(ctx, &it, data); err != nil {
				return it, err
			}
		case "startsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startsWith"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().StartsWith(ctx, &it, data); err != nil {
				return it, err
			}
		case "notStartsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notStartsWith"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().NotStartsWith(ctx, &it, data); err != nil {
				return it, err
			}
		case "endsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endsWith"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().EndsWith(ctx, &it, data); err != nil {
				return it, err
			}
		case "notEndsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEndsWith"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().NotEndsWith(ctx, &it, data); err != nil {
				return it, err
			}
		case "in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			data, err := ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().In(ctx, &it, data); err != nil {
				return it, err
			}
		case "notIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notIn"))
			data, err := ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.StringFilter().NotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "isNull":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isNull"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsNull = data
		case "isNotNull":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isNotNull"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsNotNull = data
		case "caseInsensitive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caseInsensitive"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CaseInsensitive = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *utils.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋoxynoᚑzetaᚋgolangᚑgraphqlᚑexampleᚋpkgᚋgolangᚑgraphqlᚑexampleᚋserverᚋgraphqlᚋutilsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *utils.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBooleanFilter2ᚖgithubᚗcomᚋoxynoᚑzetaᚋgolangᚑgraphqlᚑexampleᚋpkgᚋgolangᚑgraphqlᚑexampleᚋdatabaseᚋcommonᚐGenericFilter(ctx context.Context, v any) (*common.GenericFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODateFilter2ᚖgithubᚗcomᚋoxynoᚑzetaᚋgolangᚑgraphqlᚑexampleᚋpkgᚋgolangᚑgraphqlᚑexampleᚋdatabaseᚋcommonᚐDateFilter(ctx context.Context, v any) (*common.DateFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDateFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODateFormat2ᚖgithubᚗcomᚋoxynoᚑzetaᚋgolangᚑgraphqlᚑexampleᚋpkgᚋgolangᚑgraphqlᚑexampleᚋserverᚋgraphqlᚋutilsᚐDateFormat(ctx context.Context, v any) (*utils.DateFormat, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(utils.DateFormat)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateFormat2ᚖgithubᚗcomᚋoxynoᚑzetaᚋgolangᚑgraphqlᚑexampleᚋpkgᚋgolangᚑgraphqlᚑexampleᚋserverᚋgraphqlᚋutilsᚐDateFormat(ctx context.Context, sel ast.SelectionSet, v *utils.DateFormat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSortOrderEnum2ᚖgithubᚗcomᚋoxynoᚑzetaᚋgolangᚑgraphqlᚑexampleᚋpkgᚋgolangᚑgraphqlᚑexampleᚋdatabaseᚋcommonᚐSortOrderEnum(ctx context.Context, v any) (*common.SortOrderEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(common.SortOrderEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortOrderEnum2ᚖgithubᚗcomᚋoxynoᚑzetaᚋgolangᚑgraphqlᚑexampleᚋpkgᚋgolangᚑgraphqlᚑexampleᚋdatabaseᚋcommonᚐSortOrderEnum(ctx context.Context, sel ast.SelectionSet, v *common.SortOrderEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOStringFilter2ᚖgithubᚗcomᚋoxynoᚑzetaᚋgolangᚑgraphqlᚑexampleᚋpkgᚋgolangᚑgraphqlᚑexampleᚋdatabaseᚋcommonᚐGenericFilter(ctx context.Context, v any) (*common.GenericFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
