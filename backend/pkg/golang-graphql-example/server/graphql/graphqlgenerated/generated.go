// Code generated by graphqlgen, DO NOT EDIT.
package graphqlgenerated

import (
	models0 "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/business/todos/models"
	pagination "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/database/pagination"
	model "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/server/graphql/model"
	utils "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/server/graphql/utils"
)

func MapTodoConnection(list []*models0.Todo, pageOut *pagination.PageOutput) (*model.TodoConnection, error) {
	edges := make([]*model.TodoEdge, len(list))

	var startCursor, endCursor *string

	last := len(list) - 1

	for i, v := range list {
		cursor := utils.GetPaginateCursor(i, pageOut.Skip)

		if i == 0 {
			startCursor = &cursor
		}

		if i == last {
			endCursor = &cursor
		}

		edges[i] = &model.TodoEdge{
			Cursor: cursor,
			Node:   v,
		}
	}

	res := &model.TodoConnection{
		Edges: edges,
		PageInfo: &utils.PageInfo{
			EndCursor:       endCursor,
			HasNextPage:     pageOut.HasNext,
			HasPreviousPage: pageOut.HasPrevious,
			StartCursor:     startCursor,
		},
	}

	return res, nil
}
