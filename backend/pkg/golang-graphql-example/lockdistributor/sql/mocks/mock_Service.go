// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/lockdistributor/sql (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_Service.go -package=mocks github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/lockdistributor/sql Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sqllockdistributor "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/lockdistributor/sql"
	log "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/log"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetLock mocks base method.
func (m *MockService) GetLock(arg0 string) sqllockdistributor.Lock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLock", arg0)
	ret0, _ := ret[0].(sqllockdistributor.Lock)
	return ret0
}

// GetLock indicates an expected call of GetLock.
func (mr *MockServiceMockRecorder) GetLock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLock", reflect.TypeOf((*MockService)(nil).GetLock), arg0)
}

// InitializeAndReload mocks base method.
func (m *MockService) InitializeAndReload(arg0 log.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeAndReload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeAndReload indicates an expected call of InitializeAndReload.
func (mr *MockServiceMockRecorder) InitializeAndReload(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeAndReload", reflect.TypeOf((*MockService)(nil).InitializeAndReload), arg0)
}
