// Code generated by ModelTags, DO NOT EDIT.
package models

import errors "emperror.dev/errors"

// ErrTodoUnsupportedGormColumn will be thrown when an unsupported Gorm column will be found in transform function.
var ErrTodoUnsupportedGormColumn = errors.Sentinel("unsupported gorm column")

// ErrTodoUnsupportedJSONKey will be thrown when an unsupported JSON key will be found in transform function.
var ErrTodoUnsupportedJSONKey = errors.Sentinel("unsupported json key")

// ErrTodoUnsupportedStructKeyName will be thrown when an unsupported structure key will be found in transform function.
var ErrTodoUnsupportedStructKeyName = errors.Sentinel("unsupported struct key")

/* Gorm columns Names */
// Todo UpdatedAt Gorm Column Name
const TodoUpdatedAtGormColumnName = "updated_at"

// Todo DeletedAt Gorm Column Name
const TodoDeletedAtGormColumnName = "deleted_at"

// Todo ID Gorm Column Name
const TodoIDGormColumnName = "id"

// Todo Text Gorm Column Name
const TodoTextGormColumnName = "text"

// Todo Done Gorm Column Name
const TodoDoneGormColumnName = "done"

// Todo CreatedAt Gorm Column Name
const TodoCreatedAtGormColumnName = "created_at"

var TodoGormColumnNameList = []string{TodoUpdatedAtGormColumnName, TodoDeletedAtGormColumnName, TodoIDGormColumnName, TodoTextGormColumnName, TodoDoneGormColumnName, TodoCreatedAtGormColumnName}

/* JSON Key Names */
// Todo DeletedAt JSON Key Name
const TodoDeletedAtJSONKeyName = "deletedAt"

// Todo ID JSON Key Name
const TodoIDJSONKeyName = "id"

// Todo Text JSON Key Name
const TodoTextJSONKeyName = "Text"

// Todo Done JSON Key Name
const TodoDoneJSONKeyName = "Done"

// Todo CreatedAt JSON Key Name
const TodoCreatedAtJSONKeyName = "createdAt"

// Todo UpdatedAt JSON Key Name
const TodoUpdatedAtJSONKeyName = "updatedAt"

var TodoJSONKeyNameList = []string{TodoDeletedAtJSONKeyName, TodoIDJSONKeyName, TodoTextJSONKeyName, TodoDoneJSONKeyName, TodoCreatedAtJSONKeyName, TodoUpdatedAtJSONKeyName}

/* Struct Key Names */
// Todo CreatedAt Struct Key Name
const TodoCreatedAtStructKeyName = "CreatedAt"

// Todo UpdatedAt Struct Key Name
const TodoUpdatedAtStructKeyName = "UpdatedAt"

// Todo DeletedAt Struct Key Name
const TodoDeletedAtStructKeyName = "DeletedAt"

// Todo ID Struct Key Name
const TodoIDStructKeyName = "ID"

// Todo Text Struct Key Name
const TodoTextStructKeyName = "Text"

// Todo Done Struct Key Name
const TodoDoneStructKeyName = "Done"

var TodoStructKeyNameList = []string{TodoCreatedAtStructKeyName, TodoUpdatedAtStructKeyName, TodoDeletedAtStructKeyName, TodoIDStructKeyName, TodoTextStructKeyName, TodoDoneStructKeyName}

// Transform Todo Gorm Column To JSON Key
func TransformTodoGormColumnToJSONKey(gormColumn string) (string, error) {
	switch gormColumn {
	case TodoIDGormColumnName:
		return TodoIDJSONKeyName, nil
	case TodoTextGormColumnName:
		return TodoTextJSONKeyName, nil
	case TodoDoneGormColumnName:
		return TodoDoneJSONKeyName, nil
	case TodoCreatedAtGormColumnName:
		return TodoCreatedAtJSONKeyName, nil
	case TodoUpdatedAtGormColumnName:
		return TodoUpdatedAtJSONKeyName, nil
	case TodoDeletedAtGormColumnName:
		return TodoDeletedAtJSONKeyName, nil
	default:
		return "", errors.WithStack(ErrTodoUnsupportedGormColumn)
	}
}

// Transform Todo JSON Key To Gorm Column
func TransformTodoJSONKeyToGormColumn(jsonKey string) (string, error) {
	switch jsonKey {
	case TodoCreatedAtJSONKeyName:
		return TodoCreatedAtGormColumnName, nil
	case TodoUpdatedAtJSONKeyName:
		return TodoUpdatedAtGormColumnName, nil
	case TodoDeletedAtJSONKeyName:
		return TodoDeletedAtGormColumnName, nil
	case TodoIDJSONKeyName:
		return TodoIDGormColumnName, nil
	case TodoTextJSONKeyName:
		return TodoTextGormColumnName, nil
	case TodoDoneJSONKeyName:
		return TodoDoneGormColumnName, nil
	default:
		return "", errors.WithStack(ErrTodoUnsupportedJSONKey)
	}
}

// Transform Todo JSON Key map To Gorm Column map
func TransformTodoJSONKeyMapToGormColumnMap(input map[string]any, ignoreUnsupportedError bool) (map[string]any, error) {
	m := map[string]any{}

	for k, v := range input {
		r, err := TransformTodoJSONKeyToGormColumn(k)
		if err != nil {
			if ignoreUnsupportedError && errors.Is(err, ErrTodoUnsupportedJSONKey) {
				continue
			}
			return nil, err
		}
		m[r] = v
	}

	return m, nil
}

// Transform Todo Gorm Column map To JSON Key map
func TransformTodoGormColumnMapToJSONKeyMap(input map[string]any, ignoreUnsupportedError bool) (map[string]any, error) {
	m := map[string]any{}

	for k, v := range input {
		r, err := TransformTodoGormColumnToJSONKey(k)
		if err != nil {
			if ignoreUnsupportedError && errors.Is(err, ErrTodoUnsupportedGormColumn) {
				continue
			}
			return nil, err
		}
		m[r] = v
	}

	return m, nil
}

// Transform Todo Gorm Column To Struct Key Name
func TransformTodoGormColumnToStructKeyName(gormColumn string) (string, error) {
	switch gormColumn {
	case TodoIDGormColumnName:
		return TodoIDStructKeyName, nil
	case TodoTextGormColumnName:
		return TodoTextStructKeyName, nil
	case TodoDoneGormColumnName:
		return TodoDoneStructKeyName, nil
	case TodoCreatedAtGormColumnName:
		return TodoCreatedAtStructKeyName, nil
	case TodoUpdatedAtGormColumnName:
		return TodoUpdatedAtStructKeyName, nil
	case TodoDeletedAtGormColumnName:
		return TodoDeletedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrTodoUnsupportedGormColumn)
	}
}

// Transform Todo Struct Key Name To Gorm Column
func TransformTodoStructKeyNameToGormColumn(structKey string) (string, error) {
	switch structKey {
	case TodoTextStructKeyName:
		return TodoTextGormColumnName, nil
	case TodoDoneStructKeyName:
		return TodoDoneGormColumnName, nil
	case TodoCreatedAtStructKeyName:
		return TodoCreatedAtGormColumnName, nil
	case TodoUpdatedAtStructKeyName:
		return TodoUpdatedAtGormColumnName, nil
	case TodoDeletedAtStructKeyName:
		return TodoDeletedAtGormColumnName, nil
	case TodoIDStructKeyName:
		return TodoIDGormColumnName, nil
	default:
		return "", errors.WithStack(ErrTodoUnsupportedStructKeyName)
	}
}

// Transform Todo Struct Key Name map To Gorm Column map
func TransformTodoStructKeyNameMapToGormColumnMap(input map[string]any, ignoreUnsupportedError bool) (map[string]any, error) {
	m := map[string]any{}

	for k, v := range input {
		r, err := TransformTodoStructKeyNameToGormColumn(k)
		if err != nil {
			if ignoreUnsupportedError && errors.Is(err, ErrTodoUnsupportedStructKeyName) {
				continue
			}
			return nil, err
		}
		m[r] = v
	}

	return m, nil
}

// Transform Todo Gorm Column map To Struct Key Name map
func TransformTodoGormColumnMapToStructKeyNameMap(input map[string]any, ignoreUnsupportedError bool) (map[string]any, error) {
	m := map[string]any{}

	for k, v := range input {
		r, err := TransformTodoGormColumnToStructKeyName(k)
		if err != nil {
			if ignoreUnsupportedError && errors.Is(err, ErrTodoUnsupportedGormColumn) {
				continue
			}
			return nil, err
		}
		m[r] = v
	}

	return m, nil
}

// Transform Todo JSON Key To Struct Key Name
func TransformTodoJSONKeyToStructKeyName(jsonKey string) (string, error) {
	switch jsonKey {
	case TodoCreatedAtJSONKeyName:
		return TodoCreatedAtStructKeyName, nil
	case TodoUpdatedAtJSONKeyName:
		return TodoUpdatedAtStructKeyName, nil
	case TodoDeletedAtJSONKeyName:
		return TodoDeletedAtStructKeyName, nil
	case TodoIDJSONKeyName:
		return TodoIDStructKeyName, nil
	case TodoTextJSONKeyName:
		return TodoTextStructKeyName, nil
	case TodoDoneJSONKeyName:
		return TodoDoneStructKeyName, nil
	default:
		return "", errors.WithStack(ErrTodoUnsupportedJSONKey)
	}
}

// Transform Todo Struct Key Name To JSON Key
func TransformTodoStructKeyNameToJSONKey(structKey string) (string, error) {
	switch structKey {
	case TodoUpdatedAtStructKeyName:
		return TodoUpdatedAtStructKeyName, nil
	case TodoDeletedAtStructKeyName:
		return TodoDeletedAtStructKeyName, nil
	case TodoIDStructKeyName:
		return TodoIDStructKeyName, nil
	case TodoTextStructKeyName:
		return TodoTextStructKeyName, nil
	case TodoDoneStructKeyName:
		return TodoDoneStructKeyName, nil
	case TodoCreatedAtStructKeyName:
		return TodoCreatedAtStructKeyName, nil
	default:
		return "", errors.WithStack(ErrTodoUnsupportedStructKeyName)
	}
}

// Transform Todo Struct Key Name map To JSON Key map
func TransformTodoStructKeyNameMapToJSONKeyMap(input map[string]any, ignoreUnsupportedError bool) (map[string]any, error) {
	m := map[string]any{}

	for k, v := range input {
		r, err := TransformTodoStructKeyNameToJSONKey(k)
		if err != nil {
			if ignoreUnsupportedError && errors.Is(err, ErrTodoUnsupportedStructKeyName) {
				continue
			}
			return nil, err
		}
		m[r] = v
	}

	return m, nil
}

// Transform Todo JSON Key map To Struct Key Name map
func TransformTodoJSONKeyMapToStructKeyNameMap(input map[string]any, ignoreUnsupportedError bool) (map[string]any, error) {
	m := map[string]any{}

	for k, v := range input {
		r, err := TransformTodoJSONKeyToStructKeyName(k)
		if err != nil {
			if ignoreUnsupportedError && errors.Is(err, ErrTodoUnsupportedJSONKey) {
				continue
			}
			return nil, err
		}
		m[r] = v
	}

	return m, nil
}
