// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/business/todos (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_Service.go -package=mocks github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/business/todos Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	todos "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/business/todos"
	models "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/business/todos/models"
	pagination "github.com/oxyno-zeta/golang-graphql-example/pkg/golang-graphql-example/database/pagination"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockService) Close(ctx context.Context, id string, projection *models.Projection) (*models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx, id, projection)
	ret0, _ := ret[0].(*models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close(ctx, id, projection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close), ctx, id, projection)
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, inp *todos.InputCreateTodo) (*models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, inp)
	ret0, _ := ret[0].(*models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, inp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, inp)
}

// Find mocks base method.
func (m *MockService) Find(ctx context.Context, sort []*models.SortOrder, filter *models.Filter, projection *models.Projection) ([]*models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, sort, filter, projection)
	ret0, _ := ret[0].([]*models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockServiceMockRecorder) Find(ctx, sort, filter, projection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockService)(nil).Find), ctx, sort, filter, projection)
}

// FindByID mocks base method.
func (m *MockService) FindByID(ctx context.Context, id string, projection *models.Projection) (*models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id, projection)
	ret0, _ := ret[0].(*models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockServiceMockRecorder) FindByID(ctx, id, projection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockService)(nil).FindByID), ctx, id, projection)
}

// GetAllPaginated mocks base method.
func (m *MockService) GetAllPaginated(ctx context.Context, page *pagination.PageInput, sort []*models.SortOrder, filter *models.Filter, projection *models.Projection) ([]*models.Todo, *pagination.PageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaginated", ctx, page, sort, filter, projection)
	ret0, _ := ret[0].([]*models.Todo)
	ret1, _ := ret[1].(*pagination.PageOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllPaginated indicates an expected call of GetAllPaginated.
func (mr *MockServiceMockRecorder) GetAllPaginated(ctx, page, sort, filter, projection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaginated", reflect.TypeOf((*MockService)(nil).GetAllPaginated), ctx, page, sort, filter, projection)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, inp *todos.InputUpdateTodo) (*models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, inp)
	ret0, _ := ret[0].(*models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, inp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, inp)
}
